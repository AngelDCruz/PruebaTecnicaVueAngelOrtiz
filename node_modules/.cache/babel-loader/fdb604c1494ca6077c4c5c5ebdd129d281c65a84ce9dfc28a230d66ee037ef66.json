{"ast":null,"code":"import ruletaDatos from \"@/components/ruleta-datos.vue\";\nimport ruletaJuego from \"@/components/ruleta-indicador.vue\";\nexport default {\n  name: \"ruleta-juego\",\n  components: {\n    ruletaDatos,\n    ruletaJuego\n  },\n  data() {\n    return {\n      datosEmitidos: {\n        color: \"S/A\",\n        numero: 0,\n        monto: 0\n      },\n      colores: [\"#C34A36\", \"#4B4453\"],\n      datosGanadores: {\n        color: null,\n        numero: null,\n        esPar: null\n      },\n      nuevoMonto: 0\n    };\n  },\n  methods: {\n    datosEmitidosEvento(datos) {\n      this.datosGanadores = {\n        color: null,\n        numero: null,\n        esPar: null\n      };\n      this.datosEmitidos = datos;\n      let numGanador = this.generarNumAleatorio();\n      let grados = this.calcularGrados(numGanador);\n      if (datos.monto < datos.apuesta || datos.monto <= 0) {\n        alert(\"Saldo insuficiente para apostar\");\n        return;\n      }\n      this.$refs.ruletaTablero.iniciarJuego(numGanador, grados, datosGanadorRuleta => {\n        let esParGanador = this.esPar(numGanador);\n        let colorGanador = datosGanadorRuleta.color;\n        if (numGanador == datos.numero) this.datosGanadores.numero = numGanador;\n        if (colorGanador == datos.color) this.datosGanadores.color = colorGanador;\n        if (esParGanador == datos.esPar) this.datosGanadores.esPar = esParGanador;\n        setTimeout(() => {\n          this.validarPremio();\n        }, 2100);\n      });\n    },\n    generarNumAleatorio() {\n      return Math.ceil(Math.random() * 5);\n    },\n    generarNumAleatorioParaColores() {\n      let numAleatorio = Math.ceil(Math.random() * 2) - 1;\n      numAleatorio = numAleatorio < 0 ? 0 : numAleatorio;\n      return this.colores[numAleatorio];\n    },\n    validarPremio() {\n      let montoActual = this.datosEmitidos.monto;\n      let apuestaActual = this.datosEmitidos.apuesta;\n      if (this.datosGanadores.numero && this.datosGanadores.color && this.datosGanadores.esPar !== null) {\n        alert(\"numero, impar y color ganadores\");\n      } else if (this.datosGanadores.numero && this.datosGanadores.esPar !== null && !this.datosGanadores.color) {\n        alert(\"numero, impar\");\n      } else if (this.datosGanadores.esPar == null && this.datosGanadores.numero && this.datosGanadores.color) {\n        alert(\"numero y color ganadores\");\n      } else if (!this.datosGanadores.color && this.datosGanadores.esPar == null && this.datosGanadores.numero) {\n        alert(\"numero ganador\");\n        let premio = apuestaActual * 2;\n        this.$refs.ruletaDatos.datosModelo.monto = parseFloat(montoActual) + parseFloat(premio);\n      } else if (!this.datosGanadores.numero && this.datosGanadores.esPar == null && this.datosGanadores.color) {\n        alert(\"color ganador\");\n        let premio = apuestaActual / 2;\n        this.$refs.ruletaDatos.datosModelo.monto = parseFloat(montoActual) + parseFloat(premio);\n      } else if (!this.datosGanadores.numero && !this.datosGanadores.color && this.datosGanadores.esPar != null) {\n        alert(`el numero ganador es ${this.datosGanadores.esPar ? \"Par\" : \"Impar\"}`);\n      } else if (!this.datosGanadores.numero && this.datosGanadores.color && this.datosGanadores.esPar != null) {\n        alert(`color ganador y numero ${this.datosGanadores.esPar ? \"Par\" : \"Impar\"}`);\n      } else {\n        this.$refs.ruletaDatos.datosModelo.monto = parseFloat(montoActual) - parseFloat(apuestaActual);\n        alert(\"haz perdido\");\n      }\n    },\n    esPar(numero) {\n      return numero % 2 == 0;\n    },\n    calcularGrados(numero) {\n      let grados = 360 / 32;\n      return numero * grados;\n    },\n    restarMonto() {\n      this.da;\n    }\n  },\n  computed: {}\n};","map":{"version":3,"names":["ruletaDatos","ruletaJuego","name","components","data","datosEmitidos","color","numero","monto","colores","datosGanadores","esPar","nuevoMonto","methods","datosEmitidosEvento","datos","numGanador","generarNumAleatorio","grados","calcularGrados","apuesta","alert","$refs","ruletaTablero","iniciarJuego","datosGanadorRuleta","esParGanador","colorGanador","setTimeout","validarPremio","Math","ceil","random","generarNumAleatorioParaColores","numAleatorio","montoActual","apuestaActual","premio","datosModelo","parseFloat","restarMonto","da","computed"],"sources":["src/views/ruleta-juego.vue"],"sourcesContent":["<template>\r\n  <v-row dense justify=\"center\" align=\"start\">\r\n    <v-col cols=\"12\" class=\"titulo mb-8\">\r\n      <h2 class=\"text-center white--text pa-5\">Juego de ruleta</h2>\r\n    </v-col>\r\n    <v-col cols=\"6\" class=\"text-centr\">\r\n      <ruletaDatos @emitirDatos=\"datosEmitidosEvento\" ref=\"ruletaDatos\" />\r\n    </v-col>\r\n    <v-col cols=\"5\" class=\"text-center\">\r\n      <ruletaJuego ref=\"ruletaTablero\" />\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nimport ruletaDatos from \"@/components/ruleta-datos.vue\";\r\nimport ruletaJuego from \"@/components/ruleta-indicador.vue\";\r\n\r\nexport default {\r\n  name: \"ruleta-juego\",\r\n\r\n  components: {\r\n    ruletaDatos,\r\n    ruletaJuego,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      datosEmitidos: {\r\n        color: \"S/A\",\r\n        numero: 0,\r\n        monto: 0,\r\n      },\r\n      colores: [\"#C34A36\", \"#4B4453\"],\r\n      datosGanadores: {\r\n        color: null,\r\n        numero: null,\r\n        esPar: null,\r\n      },\r\n      nuevoMonto: 0,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    datosEmitidosEvento(datos) {\r\n      this.datosGanadores = {\r\n        color: null,\r\n        numero: null,\r\n        esPar: null,\r\n      };\r\n      this.datosEmitidos = datos;\r\n      let numGanador = this.generarNumAleatorio();\r\n      let grados = this.calcularGrados(numGanador);\r\n\r\n      if (datos.monto < datos.apuesta || datos.monto <= 0) {\r\n        alert(\"Saldo insuficiente para apostar\");\r\n\r\n        return;\r\n      }\r\n\r\n      this.$refs.ruletaTablero.iniciarJuego(\r\n        numGanador,\r\n        grados,\r\n        (datosGanadorRuleta) => {\r\n          let esParGanador = this.esPar(numGanador);\r\n          let colorGanador = datosGanadorRuleta.color;\r\n\r\n          if (numGanador == datos.numero)\r\n            this.datosGanadores.numero = numGanador;\r\n          if (colorGanador == datos.color)\r\n            this.datosGanadores.color = colorGanador;\r\n          if (esParGanador == datos.esPar)\r\n            this.datosGanadores.esPar = esParGanador;\r\n\r\n          setTimeout(() => {\r\n            this.validarPremio();\r\n          }, 2100);\r\n        }\r\n      );\r\n    },\r\n    generarNumAleatorio() {\r\n      return Math.ceil(Math.random() * 5);\r\n    },\r\n    generarNumAleatorioParaColores() {\r\n      let numAleatorio = Math.ceil(Math.random() * 2) - 1;\r\n      numAleatorio = numAleatorio < 0 ? 0 : numAleatorio;\r\n      return this.colores[numAleatorio];\r\n    },\r\n    validarPremio() {\r\n      let montoActual = this.datosEmitidos.monto;\r\n      let apuestaActual = this.datosEmitidos.apuesta;\r\n\r\n      if (\r\n        this.datosGanadores.numero &&\r\n        this.datosGanadores.color &&\r\n        this.datosGanadores.esPar !== null\r\n      ) {\r\n        alert(\"numero, impar y color ganadores\");\r\n      } else if (\r\n        this.datosGanadores.numero &&\r\n        this.datosGanadores.esPar !== null &&\r\n        !this.datosGanadores.color\r\n      ) {\r\n        alert(\"numero, impar\");\r\n      } else if (\r\n        this.datosGanadores.esPar == null &&\r\n        this.datosGanadores.numero &&\r\n        this.datosGanadores.color\r\n      ) {\r\n        alert(\"numero y color ganadores\");\r\n      } else if (\r\n        !this.datosGanadores.color &&\r\n        this.datosGanadores.esPar == null &&\r\n        this.datosGanadores.numero\r\n      ) {\r\n        alert(\"numero ganador\");\r\n        let premio = apuestaActual * 2;\r\n        this.$refs.ruletaDatos.datosModelo.monto =\r\n          parseFloat(montoActual) + parseFloat(premio);\r\n      } else if (\r\n        !this.datosGanadores.numero &&\r\n        this.datosGanadores.esPar == null &&\r\n        this.datosGanadores.color\r\n      ) {\r\n        alert(\"color ganador\");\r\n\r\n        let premio = apuestaActual / 2;\r\n        this.$refs.ruletaDatos.datosModelo.monto =\r\n          parseFloat(montoActual) + parseFloat(premio);\r\n      } else if (\r\n        !this.datosGanadores.numero &&\r\n        !this.datosGanadores.color &&\r\n        this.datosGanadores.esPar != null\r\n      ) {\r\n        alert(\r\n          `el numero ganador es ${this.datosGanadores.esPar ? \"Par\" : \"Impar\"}`\r\n        );\r\n      } else if (\r\n        !this.datosGanadores.numero &&\r\n        this.datosGanadores.color &&\r\n        this.datosGanadores.esPar != null\r\n      ) {\r\n        alert(\r\n          `color ganador y numero ${\r\n            this.datosGanadores.esPar ? \"Par\" : \"Impar\"\r\n          }`\r\n        );\r\n      } else {\r\n        this.$refs.ruletaDatos.datosModelo.monto =\r\n          parseFloat(montoActual) - parseFloat(apuestaActual);\r\n        alert(\"haz perdido\");\r\n      }\r\n    },\r\n    esPar(numero) {\r\n      return numero % 2 == 0;\r\n    },\r\n    calcularGrados(numero) {\r\n      let grados = 360 / 32;\r\n      return numero * grados;\r\n    },\r\n    restarMonto() {\r\n      this.da;\r\n    },\r\n  },\r\n  computed: {},\r\n};\r\n</script>\r\n\r\n<style>\r\n.contenedor {\r\n  background: #f6f6f6 !important;\r\n}\r\n.titulo {\r\n  background: rgba(10, 92, 179, 0.977);\r\n}\r\n</style>\r\n"],"mappings":"AAeA,OAAAA,WAAA;AACA,OAAAC,WAAA;AAEA;EACAC,IAAA;EAEAC,UAAA;IACAH,WAAA;IACAC;EACA;EAEAG,KAAA;IACA;MACAC,aAAA;QACAC,KAAA;QACAC,MAAA;QACAC,KAAA;MACA;MACAC,OAAA;MACAC,cAAA;QACAJ,KAAA;QACAC,MAAA;QACAI,KAAA;MACA;MACAC,UAAA;IACA;EACA;EAEAC,OAAA;IACAC,oBAAAC,KAAA;MACA,KAAAL,cAAA;QACAJ,KAAA;QACAC,MAAA;QACAI,KAAA;MACA;MACA,KAAAN,aAAA,GAAAU,KAAA;MACA,IAAAC,UAAA,QAAAC,mBAAA;MACA,IAAAC,MAAA,QAAAC,cAAA,CAAAH,UAAA;MAEA,IAAAD,KAAA,CAAAP,KAAA,GAAAO,KAAA,CAAAK,OAAA,IAAAL,KAAA,CAAAP,KAAA;QACAa,KAAA;QAEA;MACA;MAEA,KAAAC,KAAA,CAAAC,aAAA,CAAAC,YAAA,CACAR,UAAA,EACAE,MAAA,EACAO,kBAAA;QACA,IAAAC,YAAA,QAAAf,KAAA,CAAAK,UAAA;QACA,IAAAW,YAAA,GAAAF,kBAAA,CAAAnB,KAAA;QAEA,IAAAU,UAAA,IAAAD,KAAA,CAAAR,MAAA,EACA,KAAAG,cAAA,CAAAH,MAAA,GAAAS,UAAA;QACA,IAAAW,YAAA,IAAAZ,KAAA,CAAAT,KAAA,EACA,KAAAI,cAAA,CAAAJ,KAAA,GAAAqB,YAAA;QACA,IAAAD,YAAA,IAAAX,KAAA,CAAAJ,KAAA,EACA,KAAAD,cAAA,CAAAC,KAAA,GAAAe,YAAA;QAEAE,UAAA;UACA,KAAAC,aAAA;QACA;MACA,EACA;IACA;IACAZ,oBAAA;MACA,OAAAa,IAAA,CAAAC,IAAA,CAAAD,IAAA,CAAAE,MAAA;IACA;IACAC,+BAAA;MACA,IAAAC,YAAA,GAAAJ,IAAA,CAAAC,IAAA,CAAAD,IAAA,CAAAE,MAAA;MACAE,YAAA,GAAAA,YAAA,WAAAA,YAAA;MACA,YAAAzB,OAAA,CAAAyB,YAAA;IACA;IACAL,cAAA;MACA,IAAAM,WAAA,QAAA9B,aAAA,CAAAG,KAAA;MACA,IAAA4B,aAAA,QAAA/B,aAAA,CAAAe,OAAA;MAEA,IACA,KAAAV,cAAA,CAAAH,MAAA,IACA,KAAAG,cAAA,CAAAJ,KAAA,IACA,KAAAI,cAAA,CAAAC,KAAA,WACA;QACAU,KAAA;MACA,WACA,KAAAX,cAAA,CAAAH,MAAA,IACA,KAAAG,cAAA,CAAAC,KAAA,aACA,MAAAD,cAAA,CAAAJ,KAAA,EACA;QACAe,KAAA;MACA,WACA,KAAAX,cAAA,CAAAC,KAAA,YACA,KAAAD,cAAA,CAAAH,MAAA,IACA,KAAAG,cAAA,CAAAJ,KAAA,EACA;QACAe,KAAA;MACA,WACA,MAAAX,cAAA,CAAAJ,KAAA,IACA,KAAAI,cAAA,CAAAC,KAAA,YACA,KAAAD,cAAA,CAAAH,MAAA,EACA;QACAc,KAAA;QACA,IAAAgB,MAAA,GAAAD,aAAA;QACA,KAAAd,KAAA,CAAAtB,WAAA,CAAAsC,WAAA,CAAA9B,KAAA,GACA+B,UAAA,CAAAJ,WAAA,IAAAI,UAAA,CAAAF,MAAA;MACA,WACA,MAAA3B,cAAA,CAAAH,MAAA,IACA,KAAAG,cAAA,CAAAC,KAAA,YACA,KAAAD,cAAA,CAAAJ,KAAA,EACA;QACAe,KAAA;QAEA,IAAAgB,MAAA,GAAAD,aAAA;QACA,KAAAd,KAAA,CAAAtB,WAAA,CAAAsC,WAAA,CAAA9B,KAAA,GACA+B,UAAA,CAAAJ,WAAA,IAAAI,UAAA,CAAAF,MAAA;MACA,WACA,MAAA3B,cAAA,CAAAH,MAAA,IACA,MAAAG,cAAA,CAAAJ,KAAA,IACA,KAAAI,cAAA,CAAAC,KAAA,UACA;QACAU,KAAA,CACA,6BAAAX,cAAA,CAAAC,KAAA,qBACA;MACA,WACA,MAAAD,cAAA,CAAAH,MAAA,IACA,KAAAG,cAAA,CAAAJ,KAAA,IACA,KAAAI,cAAA,CAAAC,KAAA,UACA;QACAU,KAAA,CACA,0BACA,KAAAX,cAAA,CAAAC,KAAA,kBACA,GACA;MACA;QACA,KAAAW,KAAA,CAAAtB,WAAA,CAAAsC,WAAA,CAAA9B,KAAA,GACA+B,UAAA,CAAAJ,WAAA,IAAAI,UAAA,CAAAH,aAAA;QACAf,KAAA;MACA;IACA;IACAV,MAAAJ,MAAA;MACA,OAAAA,MAAA;IACA;IACAY,eAAAZ,MAAA;MACA,IAAAW,MAAA;MACA,OAAAX,MAAA,GAAAW,MAAA;IACA;IACAsB,YAAA;MACA,KAAAC,EAAA;IACA;EACA;EACAC,QAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}